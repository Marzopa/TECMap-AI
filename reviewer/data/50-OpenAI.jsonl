{"id":"edab5257-4174-4613-9193-963cc52e764c","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Write a function that receives an array of integers and returns the number of elements that are greater than zero.","tags":["loops","conditionals"],"latencyMs":2243,"generatedAt":"2025-06-12T19:50:46.091792900Z"}
{"id":"682894c5-652a-4c18-a562-2620af1b6172","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Given an array of integers, write a function that returns the largest integer in the array.","tags":["loops,arrays,comparison"],"latencyMs":2345,"generatedAt":"2025-06-12T19:50:48.436926400Z"}
{"id":"9f3f8c27-648d-47e5-8833-8563f7682fbf","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Write a function that takes an array of integers and returns the largest number in the array.","tags":["loops","comparison","arrays"],"latencyMs":2650,"generatedAt":"2025-06-12T19:50:51.088181Z"}
{"id":"c15efa09-8b5e-409e-a0c1-5d935e4e65ea","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Write a function that takes an array of integers and returns the largest integer in the array.","tags":["arrays,loops,comparison"],"latencyMs":4397,"generatedAt":"2025-06-12T19:50:55.486389300Z"}
{"id":"c9b7502b-835d-461c-a054-bb129c9ed000","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Write a function that takes an array of integers and returns the total sum of its elements.","tags":["loops,arrays,variables"],"latencyMs":4489,"generatedAt":"2025-06-12T19:50:59.976494400Z"}
{"id":"4c690791-faeb-4bd5-b0e5-f23c01c2c857","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u, both uppercase and lowercase) present in the string.","tags":["loops","conditionals"],"latencyMs":7496,"generatedAt":"2025-06-12T19:51:07.474600100Z"}
{"id":"a2e54577-14b5-4f2f-8b79-6d0ec6f10e65","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Write a function that receives a string and returns the number of vowels contained in the string, counting both uppercase and lowercase vowels.","tags":["loops","conditionals","string manipulation"],"latencyMs":2145,"generatedAt":"2025-06-12T19:51:09.621102400Z"}
{"id":"f2578e49-00f0-4de3-8ea7-47e692efa16b","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u, both uppercase and lowercase) present in the string.","tags":["loops","conditionals","string manipulation"],"latencyMs":2059,"generatedAt":"2025-06-12T19:51:11.681395800Z"}
{"id":"919324dd-c541-42b9-b5b5-9d2495ca5fd2","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u, both uppercase and lowercase) present in the string.","tags":["loops","conditionals","string manipulation"],"latencyMs":2287,"generatedAt":"2025-06-12T19:51:13.969436300Z"}
{"id":"f901cd42-e7be-41e0-a52e-3c484ff6d535","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Write a function that takes a string as input and returns the number of vowels (a, e, i, o, u, both uppercase and lowercase) contained in the string.","tags":["loops","conditionals"],"latencyMs":3007,"generatedAt":"2025-06-12T19:51:16.978144600Z"}
{"id":"0118be86-eeed-4b1a-bde6-a0757edce3a6","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Given a singly linked list, write a function that returns a new linked list with only the elements at even positions (0-based index) from the original list, using only iterative approaches.","tags":["loops","linked list","conditionals"],"latencyMs":4564,"generatedAt":"2025-06-12T19:51:21.542560500Z"}
{"id":"6782220c-315b-492c-93c9-ad71384b4209","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Given the head of a singly linked list representing a sequence of integers, write a function that iterates through the list and returns the number of nodes containing an odd integer.","tags":["iteration","conditionals"],"latencyMs":3319,"generatedAt":"2025-06-12T19:51:24.862847500Z"}
{"id":"1d8cdb0b-9ec1-4728-9b30-e9ddc8ed9330","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Given the head node of a singly linked list, write a function to return the number of nodes in the list that contain an odd integer value, using iteration.","tags":["iteration","linked list","conditionals"],"latencyMs":4732,"generatedAt":"2025-06-12T19:51:29.595030500Z"}
{"id":"18bc59ae-bfa7-445c-8a81-74b9313037ac","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Given the head node of a singly linked list, write a function that iterates through the list and returns the value stored in the second-to-last node; if the list contains fewer than two nodes, return null.","tags":["linked list","iteration"],"latencyMs":2257,"generatedAt":"2025-06-12T19:51:31.853933300Z"}
{"id":"cc995e04-15a2-439a-913e-29f51a78551f","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Given the head of a singly linked list, write a function that iterates through the list and returns the value of the last node without using recursion.","tags":["linked list","iteration"],"latencyMs":2276,"generatedAt":"2025-06-12T19:51:34.130895900Z"}
{"id":"75111758-4c32-4956-9686-17968b2bf355","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Given a list of strings, write a function that counts the frequency of each unique string in the list and returns a mapping from each string to its corresponding count.","tags":["loops,hashmap,strings"],"latencyMs":2606,"generatedAt":"2025-06-12T19:51:36.737108700Z"}
{"id":"572e0724-49ce-45a2-a199-9bc8e38cd9b4","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Given a list of strings, write a function that returns the string that appears most frequently in the list. If there is a tie for the most frequent string, return any one of them.","tags":["hashmap,loops,conditionals"],"latencyMs":2056,"generatedAt":"2025-06-12T19:51:38.794708100Z"}
{"id":"5a0c775b-edaf-44ba-bdcc-75e87bae2e29","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Given a list of student names, where some names may appear more than once, write a function to count how many times each name appears and return a mapping from names to their counts.","tags":["loops,hashmap,strings"],"latencyMs":2150,"generatedAt":"2025-06-12T19:51:40.946316800Z"}
{"id":"1dd9aef8-de10-443c-96b2-3d5215fd90dc","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Given a list of words, write a function that returns a hash map containing each unique word as a key and the number of times it appears in the list as its value.","tags":["hashmap,loop,conditional,arrays"],"latencyMs":2202,"generatedAt":"2025-06-12T19:51:43.148868100Z"}
{"id":"355c80fa-bb7c-4e3c-a6d9-1ba0df5ad9b8","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Given a list of strings, write a function that returns a mapping of each unique string to the number of times it appears in the list.","tags":["hashmap","loop","conditionals"],"latencyMs":2395,"generatedAt":"2025-06-12T19:51:45.545367100Z"}
{"id":"386989e1-0a08-4fcb-9ac8-d7417cf02943","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Design a function that takes a list of commands to simulate a queue using two stacks. Each command is either \"ENQUEUE x\" to add an integer x to the queue or \"DEQUEUE\" to remove the front element. Return a list of integers representing the values dequeued in the order they were removed.","tags":["stack","list","conditional","loop"],"latencyMs":2456,"generatedAt":"2025-06-12T19:51:48.001652800Z"}
{"id":"a91b27fb-9144-4f89-924c-f112f1addee6","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Design a function that receives a sequence of characters containing only the symbols '(', ')', '{', and '}'. The function should use an appropriate data structure to determine if the brackets and braces are properly balanced and nested within the sequence. Return a boolean indicating whether the sequence is valid.","tags":["stack","iteration","conditionals"],"latencyMs":3467,"generatedAt":"2025-06-12T19:51:51.469355500Z"}
{"id":"9161a353-8f43-423f-8e52-3571a5f1453e","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Design a function that simulates a queue using two stacks, supporting enqueue and dequeue operations, and ensure the function can handle empty queue scenarios gracefully.","tags":["stack","queue","stack operations"],"latencyMs":3351,"generatedAt":"2025-06-12T19:51:54.821446700Z"}
{"id":"b87c81bd-60c7-4f35-af7b-dd9bc65eb499","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Create a program that reads a sequence of commands from input, where each command is either \"PUSH x\" (push integer x onto a stack) or \"POP\" (remove the top element from the stack). After processing all commands, output the remaining elements in the stack from top to bottom. If a \"POP\" command is encountered when the stack is empty, ignore it.","tags":["stack","input","conditionals"],"latencyMs":2914,"generatedAt":"2025-06-12T19:51:57.736874200Z"}
{"id":"721dd609-f69f-4fdf-8c66-11f1b085c853","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Given a sequence of operations represented as a list of strings where each string is either \"PUSH X\" (insert integer X into a queue) or \"POP\" (remove and return the front element of the queue), write a function that processes these operations in order and returns a list containing the results of all \"POP\" operations, where if a \"POP\" occurs when the queue is empty, return null for that operation.","tags":["queues","lists","conditionals","loops","string parsing"],"latencyMs":3667,"generatedAt":"2025-06-12T19:52:01.404729400Z"}
{"id":"f511e0f7-5c5f-49b7-825c-ff67ee907ab3","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Given a sorted array of distinct integers and a target value, write a recursive function to determine the index of the target in the array using binary search; if the target is not present, return -1.","tags":["recursion,binary search"],"latencyMs":2765,"generatedAt":"2025-06-12T19:52:04.172202100Z"}
{"id":"fc363ea0-abf5-4839-bac9-6be4d124610d","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Given a sorted list of integers that may contain duplicates, write a recursive binary search function to find the first occurrence of a given target value and return its index; if the target is not found, return -1.","tags":["recursion,binary search"],"latencyMs":3033,"generatedAt":"2025-06-12T19:52:07.205547800Z"}
{"id":"a2039286-9330-4e2c-8f16-3ef8dd476d27","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Given a sorted array of integers, write a recursive function to determine the number of elements strictly greater than a given target value. The function should operate in logarithmic time complexity.","tags":["recursion,binary search"],"latencyMs":2513,"generatedAt":"2025-06-12T19:52:09.719918500Z"}
{"id":"606a863c-b320-458a-b6e8-a3ad9fe953a2","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Given a sorted array of distinct integers and a target value, write a function that returns the index of the target value using a recursive binary search approach, or -1 if the target is not present in the array.","tags":["recursion,binary search"],"latencyMs":2570,"generatedAt":"2025-06-12T19:52:12.289426900Z"}
{"id":"b5d40b85-bd2c-40ab-a3a5-5abc6329f92d","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Given a sorted array of integers that may contain duplicate values, write a recursive function to find the starting and ending indices (inclusive) of a target value within the array. If the target is not found, the function should return [-1, -1].","tags":["recursion,arrays,conditionals"],"latencyMs":2534,"generatedAt":"2025-06-12T19:52:14.824350800Z"}
{"id":"ec33150e-901c-463f-95e3-6f78456e7a4e","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Given an array of distinct integers, write an algorithm that sorts the array in ascending order using a selection sort-based technique, but modifies the standard selection sort to select the largest element and place it at the end of the current unsorted section during each pass, instead of selecting the smallest. Return the sorted array.","tags":["loops,arrays,sorting"],"latencyMs":4574,"generatedAt":"2025-06-12T19:52:19.399347100Z"}
{"id":"40e1f9eb-02ad-4160-a320-46cebd0fc98a","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Given a list of unsorted integers, implement the selection sort algorithm to sort the list in non-decreasing order, and return both the sorted list and the total number of swaps performed during the sort.","tags":["loops","arrays","sorting","conditionals"],"latencyMs":2397,"generatedAt":"2025-06-12T19:52:21.797218800Z"}
{"id":"fd9469ed-3000-447d-8787-acda01518909","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Write a function that implements the selection sort algorithm to sort a list of strings in alphabetical order, with the additional requirement that strings starting with uppercase letters should appear before those starting with lowercase letters if the strings are otherwise equal when compared case-insensitively.","tags":["sorting","string comparison","loops","conditionals"],"latencyMs":2671,"generatedAt":"2025-06-12T19:52:24.469497700Z"}
{"id":"885ab2de-8909-492a-b733-bcc62566b84c","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Given an array of distinct integers, implement the selection sort algorithm to sort the array in ascending order, and then return the number of swaps it performed during the sorting process.","tags":["loops","sorting","arrays","conditionals"],"latencyMs":2609,"generatedAt":"2025-06-12T19:52:27.078832300Z"}
{"id":"af4b3663-9eb5-4578-99f1-4b5a4476d46f","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Implement the selection sort algorithm to sort an array of unique integers in ascending order. After each pass that places the minimum remaining element in its correct location, record the current state of the array. Return the list of all recorded array states, including the original array before any operations, in the order they occurred.","tags":["selection sort,loops,arrays,swapping,recording states"],"latencyMs":2429,"generatedAt":"2025-06-12T19:52:29.509279200Z"}
{"id":"5bc78574-e778-40dd-9a11-4114c9042b30","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Given an undirected graph represented by a list of edges and an integer K, write an algorithm that uses breadth-first search to find the minimum number of steps required to visit exactly K distinct nodes starting from a given source node. If it is not possible to visit exactly K distinct nodes, return -1.","tags":["breadth-first search,queues,sets,graphs"],"latencyMs":2728,"generatedAt":"2025-06-12T19:52:32.238113100Z"}
{"id":"4474bfc9-1980-4bd5-a7ba-4d9e7952a386","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Given a connected, undirected weighted graph represented by an edge list, write an algorithm that finds the shortest path length between two given vertices, where the length is defined as the minimum number of edges traversed, regardless of edge weights (i.e., shortest in terms of steps, not weights). The graph may contain cycles and parallel edges.","tags":["breadth-first search,queue,visited,graph traversal"],"latencyMs":7533,"generatedAt":"2025-06-12T19:52:39.771516500Z"}
{"id":"92263f47-c2ae-4240-b744-7bf4038edc7e","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Given a connected undirected graph represented as an adjacency list and two integer nodes A and B, write an algorithm to find the smallest number of edges that must be removed to disconnect A from B, ensuring the use of breadth-first search (BFS) and not depth-first search (DFS) or dynamic programming techniques.","tags":["breadth-first search,graphs,shortest path,graph traversal"],"latencyMs":3359,"generatedAt":"2025-06-12T19:52:43.131755700Z"}
{"id":"71fea56f-d784-4c0c-9da5-425e28623217","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Given an undirected, unweighted graph represented by an adjacency list and two nodes, write a function to find the shortest path between the two nodes using only the BFS algorithm. If no path exists, return -1. Your function should optimize for time complexity and be able to handle large sparse graphs.","tags":["breadth-first search","queue","visited set","adjacency list"],"latencyMs":2791,"generatedAt":"2025-06-12T19:52:45.924793800Z"}
{"id":"2d7a8104-8c6f-46b9-9a81-377748b45843","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Given an undirected, unweighted graph represented as a list of edges and an integer k, write an algorithm to find the minimum number of edges that must be removed so that there is no path of length greater than or equal to k between any two nodes, using only Breadth-First Search and without employing any form of Depth-First Search or dynamic programming.","tags":["breadth-first search","graphs","graph traversal"],"latencyMs":7022,"generatedAt":"2025-06-12T19:52:52.947346800Z"}
{"id":"03747664-9f82-4f92-a6af-74340a62e7a7","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"Given a list of positive integers and a target integer K, write a function to determine the minimum number of elements from the list (elements can be reused multiple times) needed to sum exactly to K. If it is not possible to sum to K, return -1. Use memoization to optimize your solution.","tags":["recursion","memoization","dynamic programming"],"latencyMs":3186,"generatedAt":"2025-06-12T19:52:56.134652200Z"}
{"id":"424b6be7-29f0-499d-88fd-65f728e0a229","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"Given a list of positive integers representing the heights at each position along a path, write a function to determine the minimum total cost to reach the last position starting at the first position, where at each step you can move to the next position or skip one position ahead. The cost of jumping from position i to position j is the absolute difference in heights between position i and position j. Use an efficient approach that avoids redundant computations.","tags":["arrays","dynamic programming","loops","conditionals","absolute value"],"latencyMs":4296,"generatedAt":"2025-06-12T19:53:00.430933200Z"}
{"id":"4e9826b8-ae13-475c-92fa-0e20e98098f8","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"Given a list of N distinct coins with positive integer values and a target sum S, write a function that returns the minimum number of coins needed to make up the sum S using any number of each coin, or -1 if it is not possible. Optimize the solution using dynamic programming with memoization to achieve the best possible runtime, avoiding redundant computations.","tags":["recursion,dynamic programming,memoization"],"latencyMs":3920,"generatedAt":"2025-06-12T19:53:04.351965300Z"}
{"id":"bc5f22d1-d5fb-41d0-9160-82e45d57b502","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"Given a list of n positive integers representing coin denominations and a positive integer k, write a function to determine the minimum number of coins needed to make the exact sum k using any number of coins from the list. If it is not possible to form the sum with the given denominations, return -1. Use dynamic programming with memoization to optimize your approach.","tags":["recursion,dynamic programming,memoization,arrays"],"latencyMs":3963,"generatedAt":"2025-06-12T19:53:08.315659300Z"}
{"id":"93ad8038-ea68-4c19-8f68-0979d204cb0c","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"Given an integer target and a list of positive integers denoting allowable steps, write a function to determine the minimum number of steps needed to reach the target exactly, where at each move you can advance by any step from the list; if reaching the target is impossible, return -1, and optimize your solution by using memoization.","tags":["recursion","memoization"],"latencyMs":3810,"generatedAt":"2025-06-12T19:53:12.126297200Z"}
{"id":"bf633c49-a690-4ecb-82f1-ac52634029a0","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given an array of integers, write an efficient function to determine whether there exist three non-overlapping, contiguous subarrays such that each subarray contains at least k elements and the sum of the middle subarray is strictly less than the sum of both the first and third subarrays, respectively. Return true if such a partition exists, and false otherwise.","tags":["arrays","loops","conditionals"],"latencyMs":3223,"generatedAt":"2025-06-12T19:53:15.350038400Z"}
{"id":"c8177f8d-bfbc-42de-b90c-addba226a2bc","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given an array of integers, design an efficient algorithm that counts the number of distinct pairs of indices (i, j) with i < j such that the sum of the elements at those indices equals the sum of the elements at a separate, disjoint pair (k, l) with k < l and {i, j} ∩ {k, l} = ∅. Optimize your solution to handle large arrays and minimize time and space complexity, and ensure that each quadruple (i,j,k,l) is counted only once regardless of order.","tags":["hashmap","nested loops","arrays","pair generation"],"latencyMs":4412,"generatedAt":"2025-06-12T19:53:19.763189900Z"}
{"id":"ff5dd63d-c403-4b23-86c2-afe500ccb4d0","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given an unsorted array of integers, write a function to find the length of the longest subarray where the absolute difference between the largest and smallest elements in that subarray does not exceed a specified integer limit k. You must return the length of this subarray and design an algorithm with optimal time complexity, avoiding the use of extra space proportional to the array size and exploiting the two-pointer technique.","tags":["two-pointer,deque,sliding window"],"latencyMs":3121,"generatedAt":"2025-06-12T19:53:22.885174400Z"}
{"id":"b7938a13-8833-4925-beb2-f75e28d0a533","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given an array of integers, find the length of the longest contiguous subarray in which you can replace at most K elements with any integer so that the resulting subarray becomes strictly increasing. Return the length of this subarray.","tags":["sliding window,two pointers,array,greedy"],"latencyMs":2496,"generatedAt":"2025-06-12T19:53:25.383003100Z"}
{"id":"95b24ef5-360b-4a90-8659-6467848109ec","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given an array of integers, find the minimal length of a contiguous subarray such that, when this subarray is reversed, the entire array can be sorted in non-decreasing order. If it is not possible to sort the array by reversing a single contiguous subarray, return -1. Efficiently handle arrays with lengths up to 10^6.","tags":["array","iteration","conditionals","indexing","array reversal","sorting"],"latencyMs":2931,"generatedAt":"2025-06-12T19:53:28.314264600Z"}
