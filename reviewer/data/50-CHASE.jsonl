{"id":"77f4745e-423e-4ad1-b55d-1e67a6f602a1","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Given an array of integers, calculate the product of all elements in the array.","tags":["array","recursion"],"latencyMs":80569,"generatedAt":"2025-06-11T11:08:59.872Z"}
{"id":"be9a5145-6352-4ab2-87a3-9b4ee5280c1d","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Write a function that takes an array of integers and returns the sum of all even numbers in the array. If there are no even numbers, return 0.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting"],"latencyMs":84998,"generatedAt":"2025-06-11T11:10:24.872Z"}
{"id":"0d17b09a-0cba-4743-82e4-2b5e8a3b4c57","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Write a function that takes an array of integers and returns the sum of all even numbers in the array.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting"],"latencyMs":74794,"generatedAt":"2025-06-11T11:11:39.667Z"}
{"id":"9d953397-fd4e-4ab0-8154-98032c2f5b6e","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Write a function that takes an array of integers and returns the product of all even numbers in the array.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting"],"latencyMs":109546,"generatedAt":"2025-06-11T11:13:29.214Z"}
{"id":"a64fb60d-96ee-4dd8-8b0e-3c3f37dc48f6","topic":"arrays","difficulty":1,"additionalTopics":[],"excludedTopics":[],"content":"Write a function that takes an array of integers and returns the product of all odd numbers in the array.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting"],"latencyMs":119981,"generatedAt":"2025-06-11T11:15:29.182Z"}
{"id":"3b6f230e-6a4b-45a7-8b1a-3ce5a1c8ff0d","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","regex"],"latencyMs":88656,"generatedAt":"2025-06-11T11:16:57.853Z"}
{"id":"6d480b03-4e71-4e8d-b6d1-532f9d4582e4","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Given a string s, determine whether it contains any repeating characters using Python. Your solution should be efficient and handle large input sizes without exceeding time limits.","tags":["string manipulation"],"latencyMs":100033,"generatedAt":"2025-06-11T11:18:37.888Z"}
{"id":"8e09c846-5b99-4a1c-8f3c-2fd42e751f11","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Write a function that takes a string and returns the number of vowels (a, e, i, o, u) in it. The function should ignore case sensitivity and also count special characters like punctuation marks and spaces.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","regex"],"latencyMs":94534,"generatedAt":"2025-06-11T11:20:12.408Z"}
{"id":"fc37604e-2a94-4a63-8388-8e54e2e12fe1","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Implement a function that takes a list of integers and returns True if there is any duplicate number in the list, ignoring duplicates.","tags":["recursion","sorting","sets"],"latencyMs":96252,"generatedAt":"2025-06-11T11:21:48.675Z"}
{"id":"f7e15ef2-6468-4d46-9ded-3b217530c5e8","topic":"strings","difficulty":1,"additionalTopics":[],"excludedTopics":["regex"],"content":"Write a function that checks if a given string is a palindrome (reads the same backward as forward) without using slicing or the built-in [::-1] method.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","regex"],"latencyMs":85422,"generatedAt":"2025-06-11T11:23:14.084Z"}
{"id":"15a8c67e-eda5-426b-9e48-9f17ce987ebc","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Given a singly linked list, write an iterative function to reverse the list. Return the new head of the reversed list.","tags":["recursion","iteration"],"latencyMs":123745,"generatedAt":"2025-06-11T11:25:17.844Z"}
{"id":"3d00939e-45ea-48a8-9f10-5b0181cf68f1","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Implement a function find_middle that takes a singly-linked list as input and returns the value of the middle node. If there are two middle nodes, return the second one.","tags":["recursion","iteration"],"latencyMs":119921,"generatedAt":"2025-06-11T11:27:17.766Z"}
{"id":"a46f536e-0f23-4289-80d8-67283a65b1b4","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Given a singly-linked list, write an iterative function to determine if the list has a cycle. Return True if there is a cycle, otherwise return False. You may not use any additional data structures.","tags":["iteration","recursion"],"latencyMs":134451,"generatedAt":"2025-06-11T11:29:32.218Z"}
{"id":"b41cde74-6d1d-4e3a-9bde-0f28a6137981","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Given a singly linked list, write an iterative function to reverse the list. Your function should return the new head of the reversed list.","tags":["recursion","iteration"],"latencyMs":127832,"generatedAt":"2025-06-11T11:31:40.052Z"}
{"id":"2b12a506-0223-4a20-b8e0-1c0e3275291e","topic":"linked lists","difficulty":2,"additionalTopics":["iteration"],"excludedTopics":["recursion"],"content":"Given a singly-linked list, write an iterative function to determine if it is a palindrome. A palindrome is a sequence that reads the same backward as forward.","tags":["iteration","stack usage"],"latencyMs":162029,"generatedAt":"2025-06-11T11:34:22.083Z"}
{"id":"75102100-0def-4b65-9a41-ccc6e1e3b9ad","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Write a function that takes a string and returns the length of the longest substring without repeating characters.","tags":["hash maps","recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","dynamic programming"],"latencyMs":123191,"generatedAt":"2025-06-11T11:36:25.275Z"}
{"id":"904ea717-fd31-4ac1-9875-d4b9a4b6ca9e","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Given a list of strings, determine if any two strings are anagrams of each other.","tags":["hash maps","recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","dynamic programming"],"latencyMs":82594,"generatedAt":"2025-06-11T11:37:47.869Z"}
{"id":"c1889b89-35fc-47aa-b9ef-6d7b3cbabdc7","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Write a function that takes a string and returns the length of the longest substring without repeating characters, where the window size is always exactly 5.","tags":["hash maps","recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","dynamic programming"],"latencyMs":119564,"generatedAt":"2025-06-11T11:39:47.433Z"}
{"id":"e7cf096d-ee59-40f6-8317-27b52190c109","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Write a function that takes two strings as input and returns true if they are anagrams, false otherwise.","tags":["hash maps","recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","dynamic programming"],"latencyMs":102971,"generatedAt":"2025-06-11T11:41:30.405Z"}
{"id":"34fc9f29-7220-45a9-8d31-d3ce36f0f5f8","topic":"hash maps","difficulty":2,"additionalTopics":[],"excludedTopics":["dynamic programming"],"content":"Given a string, determine if it is a valid palindrome ignoring case and non-alphanumeric characters. A palindrome reads the same backward as forward.","tags":["hash maps"],"latencyMs":98640,"generatedAt":"2025-06-11T11:43:09.046Z"}
{"id":"b171e37d-cbbd-49df-8ce0-1cf9df15f1a2","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Implement a function that checks if a given string is a palindrome using only a stack and a queue, with a twist. A palindrome is a word, phrase, number, or other sequence of characters which reads the same backward as forward.","tags":["recursion","stacks","queues"],"latencyMs":141224,"generatedAt":"2025-06-11T11:45:30.271Z"}
{"id":"cfb5a8cc-5cb7-4dc2-aa34-720e555ea1ca","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Implement a function min_stack() that returns the minimum value from a stack of integers. The function should support push, pop, and min operations with constant time complexity for each.","tags":["recursion","stacks","queues"],"latencyMs":145563,"generatedAt":"2025-06-11T11:47:55.835Z"}
{"id":"473ed15a-e393-4a6d-9ad7-1c51019e0dcd","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Implement a function that determines if a string has all unique characters using only a stack and a queue, while also considering uppercase letters.","tags":["recursion","stacks","queues"],"latencyMs":116589,"generatedAt":"2025-06-11T11:49:52.425Z"}
{"id":"ac0daac8-fbac-458e-9407-2b21f5eefd5f","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Implement a function reverse_stack that reverses a given stack using a queue. The function should not modify the original stack but return a new reversed stack.","tags":["recursion","queues"],"latencyMs":117213,"generatedAt":"2025-06-11T11:51:49.639Z"}
{"id":"01c0fed7-9851-4dd4-bf31-bb7d4d96ae3f","topic":"stacks & queues","difficulty":2,"additionalTopics":[],"excludedTopics":["graphs"],"content":"Implement a function is_balanced(s) that checks if a given string contains balanced parentheses using only a stack and a queue. A string is considered balanced if every opening parenthesis has a corresponding closing parenthesis in the correct order.","tags":["recursion","queues"],"latencyMs":129280,"generatedAt":"2025-06-11T11:53:58.921Z"}
{"id":"3c4a02e9-73b7-4145-a17a-2f7d2cb752d4","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Implement a recursive function to perform a binary search on a sorted array of integers. The function should return the index of the target value if found, or -1 if not found.","tags":["recursion","graphs"],"latencyMs":176582,"generatedAt":"2025-06-11T11:56:55.504Z"}
{"id":"1f648bbd-515a-45de-bfe3-612fd94aa3b8","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Given a sorted array of integers and a target value, write a recursive function to determine if the target exists in the array. If the target is found, return True; otherwise, return False.","tags":["recursion","graphs"],"latencyMs":157262,"generatedAt":"2025-06-11T11:59:32.767Z"}
{"id":"e3704bc6-5290-4c9f-84c8-e527eb58e7d9","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Implement a recursive version of binary search that returns the index of the target value if found, otherwise return -1. Assume the input array is sorted in ascending order.","tags":["recursion","binary search"],"latencyMs":150541,"generatedAt":"2025-06-11T12:02:03.309Z"}
{"id":"dc6bbc22-6d2b-4d9e-a3a3-9d37b04b2d4e","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Implement a recursive function that performs binary search on a sorted array of integers to find the index of a target value. If the target is not found, return -1.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting"],"latencyMs":122795,"generatedAt":"2025-06-11T12:04:06.104Z"}
{"id":"5505cafd-e53f-4d3b-a756-d4c000ee58ad","topic":"binary search","difficulty":3,"additionalTopics":["recursion"],"excludedTopics":["graphs"],"content":"Implement a recursive function to find the index of a target value in a sorted array. If the target is not found, return -1.","tags":["recursion","binary search"],"latencyMs":181032,"generatedAt":"2025-06-11T12:07:07.137Z"}
{"id":"43112e57-46e2-4be9-936e-873e73e9e9e4","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Implement a function that sorts an array of integers using the Selection Sort algorithm. Your solution should return the sorted array.","tags":["recursion","selection sort"],"latencyMs":116105,"generatedAt":"2025-06-11T17:59:22.960720400Z"}
{"id":"4a8c2270-b07f-44aa-948e-743fd17a1694","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Implement a function that sorts an array of integers using the Selection Sort algorithm. The function should return the sorted array.","tags":["recursion","selection sort"],"latencyMs":111882,"generatedAt":"2025-06-11T18:01:14.843355200Z"}
{"id":"2b0fa7fa-50a7-4601-a293-2aaa10da2068","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Implement the Selection Sort algorithm to sort an array of integers in ascending order. However, you are not allowed to use any built-in sorting functions or libraries.","tags":["selection","sorting"],"latencyMs":144140,"generatedAt":"2025-06-11T18:03:38.985097900Z"}
{"id":"e12803df-6a55-4bb7-b28c-4dd2a65f6475","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Write a Python function to find the minimum element in an array using the Selection Sort algorithm, but without iterating over the entire array. The function should return the index of the minimum element.","tags":["selection sort"],"latencyMs":129844,"generatedAt":"2025-06-11T18:05:48.829971800Z"}
{"id":"2ecad0dd-8711-4026-9684-cc284c007537","topic":"sorting algorithms","difficulty":3,"additionalTopics":["selection sort"],"excludedTopics":["quick sort"],"content":"Design a function that sorts an array of integers using the Selection Sort algorithm, but with a twist. Instead of always swapping the minimum element found with the first unsorted element, swap it with the maximum element if the minimum is less than half of the average value of all elements in the array.","tags":["selection sort","selection sort twist"],"latencyMs":154711,"generatedAt":"2025-06-11T18:08:23.541733700Z"}
{"id":"8ec9e0ca-267d-46c0-bd3a-6cb21659ce97","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Implement a function that finds the shortest path from a source node to all other nodes in an unweighted graph using Breadth-First Search (BFS). The graph is represented as an adjacency list.","tags":["graph","BFS"],"latencyMs":174352,"generatedAt":"2025-06-11T18:11:17.893885500Z"}
{"id":"47649ed7-5927-4160-8d5f-7bc123cb6ff5","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Implement a function that determines if there is a path between two nodes in an undirected graph using Breadth-First Search (BFS). The graph is represented as an adjacency list.\\\\\\\\n\\\\\\\\n**Input:** A dictionary where keys are node values and values are lists of adjacent nodes, and two integers representing the start and end nodes.\\\\\\\\n\\\\\\\\n**Output:** A boolean indicating whether there is a path between the start and end nodes.\\\\\\\\n\\\\\\\\n**Example:**\\\\\\\\n```python\\\\\\\\ngraph = {\\\\\\\\n    1: [2, 3],\\\\\\\\n    2: [4],\\\\\\\\n    3: [5],\\\\\\\\n    4: [],\\\\\\\\n    5: []\\\\\\\\n}\\\\\\\\nstart_node = 1\\\\\\\\nend_node = 5\\\\\\\\n```","tags":["recursion","BFS"],"latencyMs":183067,"generatedAt":"2025-06-11T18:14:20.961436800Z"}
{"id":"c65924fd-28d1-4903-8f15-cfbef47ab8d4","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Implement a function that finds the shortest path between two nodes in an unweighted graph using Breadth-First Search (BFS). The graph is represented as an adjacency list.\\\\\\\\nInput:** A dictionary where keys are node labels and values are lists of adjacent node labels. Two strings representing the start and end nodes.\\\\\\\\nOutput:** A list of node labels representing the shortest path from the start to the end node, or an empty list if no path exists.","tags":["graph","start_node","end_node = {\\\\'A\\\\': ['B'","'C']","\\\\'B\\\\': ['D'","'E']","\\\\'C\\\\': ['F']","\\\\'D\\\\': []","\\\\'E\\\\': ['F']","\\\\'F\\\\': []}","'A'","'F'\\nfrom collections import deque"],"latencyMs":172896,"generatedAt":"2025-06-11T18:17:13.858544Z"}
{"id":"4cc8c4cb-1fc4-4997-911d-9ea1ef2fba49","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Implement a function that finds the shortest path from a given start node to an end node in an unweighted graph using Breadth-First Search (BFS). If no such path exists, return `None`. Assume the graph is represented as an adjacency list.","tags":["graph","start","end"],"latencyMs":162327,"generatedAt":"2025-06-11T18:19:56.186333900Z"}
{"id":"2b27727f-52c5-4008-8e00-5965bcc9f013","topic":"graphs","difficulty":4,"additionalTopics":["BFS"],"excludedTopics":["DFS","dynamic programming"],"content":"Implement a function that finds the shortest path from a source node to all other nodes in an unweighted graph using Breadth-First Search (BFS). The graph is represented as an adjacency list.","tags":["graph","start = {}","0\\n\\n# Your implementation here\\n```"],"latencyMs":146829,"generatedAt":"2025-06-11T18:22:23.016158Z"}
{"id":"66bf493e-b37b-4c63-a9af-b97622fd51ad","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"Implement a function `max_sum_subarray` that takes an array of integers and returns the maximum sum of any contiguous subarray within the input array. Use dynamic programming with memoization to solve this problem efficiently.\\n\\n```python\\ndef max_sum_subarray(nums):\\n    @lru_cache(None)\\n    def dp(i):\\n        if i == 0:\\n            return nums[0]\\n        return max(dp(i-1) + nums[i], nums[i])\\n    \\n    return max(dp(i) for i in range(len(nums)))\\n\\n# Example usage:\\n# result = max_sum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4])\\n# print(result)  # Output: 6\\n```\\n\\nEXPLANATION:\\n1. We define a helper function `dp(i)` that returns the maximum sum of any contiguous subarray ending at index `i`.\\n2. Using memoization with `lru_cache`, we store the results of previously computed values to avoid redundant calculations.\\n3. The main function iterates through the array and uses `dp(i)` to find the maximum sum subarray for each position `i`.\\n4. Finally, it returns the maximum value from these subarrays.","tags":["recursion","dynamic programming","memoization"],"latencyMs":169100,"generatedAt":"2025-06-11T18:25:12.117680300Z"}
{"id":"adefa216-dd9e-41f9-b2c4-2a391ae8e51c","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"```python\\ndef min_cost_path(costs):\\n    m, n = len(costs), len(costs[0])\\n```","tags":["recursion","memoization"],"latencyMs":168536,"generatedAt":"2025-06-11T18:28:00.655211Z"}
{"id":"d50faf06-8d65-493b-b557-605e3337b221","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"Implement a function `max_profit(prices)` that calculates the maximum profit you can achieve by buying and selling stocks on different days. You can only buy and sell one stock at a time, and you must sell the stock before you buy it again. The prices are given in an array of integers.\\n\\nFor example:\\n```python\\nprices = [7, 1, 5, 3, 6, 4]\\nmax_profit(prices) should return 5.\\n```\\n\\nANSWER:\\n\\n```python\\ndef max_profit(prices):\\n    n = len(prices)\\n    if n == 0:\\n        return 0\\n    min_price = prices[0]\\n    max_profit = 0\\n\\n    for i in range(1, n):\\n        if prices[i] \\u003c min_price:\\n            min_price = prices[i]\\n        else:\\n            max_profit = max(max_profit, prices[i] - min_price)\\n\\n    return max_profit\\n\\n# Example usage:\\nprices = [7, 1,","tags":["recursion","memoization"],"latencyMs":186277,"generatedAt":"2025-06-11T18:31:06.933237600Z"}
{"id":"0c6bca7d-6d7b-481f-b3cc-f598594f1992","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"Implement a function `min_cost_path(costs)` that takes a 2D list of integers representing the costs to traverse through cells in a grid. The function should return the minimum cost path from the top-left cell (0,0) to the bottom-right cell (m-1,n-1), where you can only move either right or down at each step.","tags":["recursion","memoization"],"latencyMs":177444,"generatedAt":"2025-06-11T18:34:04.377520Z"}
{"id":"567ef200-afde-4447-9bb1-c92c0df5b84b","topic":"dynamic programming","difficulty":4,"additionalTopics":["memoization"],"excludedTopics":["graphs"],"content":"Implement a function `min_cost_path(cost_matrix)` that finds the minimum cost path from the top-left to the bottom-right of a given `N x N` grid, where each cell in the grid has a non-negative cost. You can only move either down or right at any point in time.","tags":["recursion","memoization"],"latencyMs":174479,"generatedAt":"2025-06-11T18:36:58.858391400Z"}
{"id":"af3edfd0-2ffb-4002-b021-cadfe8410696","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given a sorted array of integers and a target value, write a function that finds the index of the last occurrence of the target in the array. If the target is not found, return -1. You must solve this problem using the two-pointer technique.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","graphs","binary trees"],"latencyMs":157811,"generatedAt":"2025-06-11T18:39:36.670058300Z"}
{"id":"bca482db-b28a-45d4-b355-3c00ec5037d9","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given an array of integers `nums` and a target integer `target`, write a function that returns the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. Your solution must have linear time complexity.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","graphs","binary trees"],"latencyMs":130434,"generatedAt":"2025-06-11T18:41:47.104654200Z"}
{"id":"399e1898-b6b9-4d60-abca-4ac237c20849","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given an array of integers `nums` and a target sum `target`, find the indices of the two numbers such that they add up to `target`. You may assume that each input would have exactly one solution, and you may not use the same element twice. Return the answer in any order.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","graphs","binary trees"],"latencyMs":125066,"generatedAt":"2025-06-11T18:43:52.170727500Z"}
{"id":"97fd75c8-2222-4490-a992-806003f651c0","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given an array of integers `nums` and a target sum `target`, write a function that returns the indices of the two numbers such that they add up to the target. You may assume that each input would have exactly one solution, and you may not use the same element twice.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","graphs","binary trees"],"latencyMs":125032,"generatedAt":"2025-06-11T18:45:57.203654200Z"}
{"id":"e1bf802a-05ae-43f7-984d-c7ad84381042","topic":"arrays","difficulty":5,"additionalTopics":["two-pointer"],"excludedTopics":["graphs","binary trees"],"content":"Given an array of integers and a target sum, determine if there exists a triplet of numbers within the array that adds up to the target sum. Return true if such a triplet exists, otherwise return false.","tags":["recursion","loops","conditionals","hashmap","arrays","string manipulation","sorting","graphs","binary trees"],"latencyMs":141678,"generatedAt":"2025-06-11T18:48:18.882143500Z"}
